---
########################################################################
#                    INSTALL GITHUB KEY AND CHECKOUT                   #
########################################################################

- name: install git on the remote machine
  apt: pkg=git update_cache=yes cache_valid_time=3600
  sudo_user: root

- name: mkdir ~/.ssh
  file: path={{ home }}/.ssh state=directory
- name: check for the smarthome-services id_rsa
  stat: path={{ home }}/.ssh/id_rsa
  register: p
- name: upload the smarthome-services id_rsa
  copy: src=smarthome-services dest={{ home }}/.ssh/id_rsa mode=600
  when: p.stat.isreg is not defined or p.stat.isreg == false

- name: cache the github.com host key
  shell: creates="{{ home }}/.ssh/.cached-host-key-github.com"
      ssh-keyscan -t ecdsa,rsa,dsa github.com >> ~/.ssh/known_hosts;
      touch {{ home }}/.ssh/.cached-host-key-github.com

- name: checkout the hub repo
  git: dest={{ app }} repo=git@github.com:smart-home/smarthome-hub-sync.git depth=1 version={{ branch }}
- name: checkout the config repo
  git: dest={{ config }} repo=git@github.com:smart-home/smart-home-config.git depth=1 version={{ branch }}
- name: checkout the blobs repo
  git: dest={{ blobs }} repo=git@github.com:smart-home/smarthome-deployment-blobs.git depth=1 version={{ branch }}
- name: checkout the drivers repo
  git: dest={{ drivers }} repo=git@github.com:smart-home/smarthome-drivers.git depth=1 version={{ branch }}


########################################################################
#                    DEPENDENCIES INSTALLATION                         #
########################################################################

- name: apt install
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  with_items:
    - python-virtualenv
    - uuid-runtime
    - rsync
  sudo_user: root

- name: install the google-dns tool
  copy: src=google-dns dest=/usr/local/bin/google-dns
      owner=root group=root mode=0755
  sudo_user: root

- name: install usbreset /1
  command: cp {{ blobs }}/usbreset-{{ ansible_machine }} /usr/local/bin/usbreset
      creates=/usr/local/bin/usbreset
  # Note: this will not update usbreset if changed
  sudo_user: root
- name: install usbreset /2
  file: path=/usr/local/bin/usbreset owner=root group=root mode=0755
  sudo_user: root

- name: create and update the virtualenv
  pip: virtualenv={{ home }}/ENV/ name=pip state=latest
- name: install requirements.txt
  pip: virtualenv={{ home }}/ENV/ requirements={{ app }}/requirements.txt
      extra_args="--use-wheel --find-links={{ blobs }}/wheelhouse"


########################################################################
#                    GENERATE/GET/INSTALL THE HUB-ID                   #
########################################################################

- name: generate hub unique UUID if not existing
  shell: creates={{ home }}/.hub-id
      uuidgen > {{ home }}/.hub-id
  when: user_hub_id is not defined

- name: check the user_hub_id/1
  shell: executable=/bin/bash [[ {{ user_hub_id }} =~ ^[a-z0-9-]+$ ]]
  when: user_hub_id is defined
  register: result
  ignore_errors: True
- name: check the user_hub_id/2
  fail: msg="invalid characters in the user_hub_id"
  when: result|failed

- name: install the user_hub_id
  copy: content={{ user_hub_id }} dest={{ home }}/.hub-id
  when: user_hub_id is defined

# - name: get the hub unique UUID
#   command: "cat {{ home }}/.hub-id"
#   register: hub_id
# - debug: >
#     msg="hub-id: {{ hub_id.stdout }}"


########################################################################
#                    ARCHITECTURE-DEPENDENT IMPORTS                    #
########################################################################

- include: armv6l.yml
  when: ansible_machine=="armv6l"
- include: x86_64.yml
  when: ansible_machine=="x86_64"


########################################################################
#                    MISC                                              #
########################################################################

# Run upgrade migrations tasks
- include: upgrade.yml

- include: drivers.yml

- name: disable ntpd
  command: insserv -r ntp
  sudo_user: root
- name: stop ntpd
  service: name=ntp state=stopped
  sudo_user: root

- name: disable rsyslogd
  command: insserv -r rsyslog
  sudo_user: root
- name: stop rsyslogd
  service: name=rsyslog state=stopped
  sudo_user: root

- name: setup and mount tmpfs
  mount: name={{ home }}/smarthome src=tmpfs fstype=tmpfs
      state=mounted
  sudo_user: root

- name: disable swap
  command: dphys-swapfile uninstall
  sudo_user: root

# Install the smarthome-remote-key
- name: check for the smarthome-remote-key
  stat: path={{ home }}/smarthome-remote-key
  register: p
- name: upload the smarthome-remote-key
  copy: src=smarthome-remote-key dest={{ home }}/smarthome-remote-key mode=600
  when: p.stat.isreg is not defined or p.stat.isreg == false

# Cache the remotehost SSH host key
- name: extract remote host
  shell: "{{ app }}/config.py | jq --raw-output .remotehost"
  register: remotehost
- name: cache the remote host key
  shell: creates="{{ home }}/.ssh/.cached-host-key-{{ remotehost.stdout.strip() }}"
      ssh-keyscan -t ecdsa,rsa,dsa {{ remotehost.stdout.strip() }} >> ~/.ssh/known_hosts;
      touch {{ home }}/.ssh/.cached-host-key-{{ remotehost.stdout.strip() }}

# Create folders
- name: extract the folders that have to be created
  shell: >
      {{ app }}/config.py | jq --raw-output '[.logs_path+(.logging_modules|.[]), .logs_path+(.loaded_drivers|.[])+"-driver", .logs_path, .data_path]|.[]'
  register: folders
- name: mkdir
  file: path={{ item }} state=directory
  with_items: folders.stdout_lines

# Setup sudoers file
- name: setup sudo
  template: src=sudoers dest=/etc/sudoers.d/smarthome validate='visudo -cf %s'
      owner=root group=root
  sudo_user: root

# Setup cronjobs
- name: create cron entries
  cron: name="run '{{ item }}'"
      job=". /etc/profile; . $HOME/.profile; cd '{{ app }}'; '{{ app }}/{{ item }}'"
  with_items:
    - smarthome-hub-runner.sh
    - smarthome-hub-watchdog.sh
