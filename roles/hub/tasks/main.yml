---
- name: install rsync on the remote machine
  apt: pkg=rsync update_cache=yes cache_valid_time=3600
  sudo: yes

- name: checkout the hub repo
  local_action: git dest={{ tmp_dir }}/smarthome-hub-sync
      repo=git@github.com:smart-home/smarthome-hub-sync.git
- local_action: file mode=600
      dest={{ tmp_dir }}/smarthome-hub-sync/smarthome-remote-key

- name: checkout the config repo
  local_action: git dest={{ tmp_dir }}/smart-home-config
      repo=git@github.com:smart-home/smart-home-config.git

- name: upload the hub code to the node
  synchronize: src={{ tmp_dir }}/smarthome-hub-sync/ dest={{ app }}/

- name: upload the config repo to the node
  synchronize: src={{ tmp_dir }}/smart-home-config/ dest={{ config }}/


- name: apt install
  apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
  with_items:
    - python-virtualenv
    - uuid-runtime
  sudo: yes

- name: install the google-dns tool
  copy: src=google-dns dest=/usr/local/bin/google-dns
      owner=root group=root mode=0755
  sudo: yes

- name: create and update the virtualenv
  pip: virtualenv={{ home }}/ENV/ name=pip state=latest
- name: upload the wheelhouse
  copy: src=wheelhouse dest={{ home }}
- name: install requirements.txt
  pip: virtualenv={{ home }}/ENV/ requirements={{ app }}/requirements.txt
      extra_args="--use-wheel --find-links={{ home }}/wheelhouse"


- include: armv6l.yml
  when: ansible_machine=="armv6l"
- include: x86_64.yml
  when: ansible_machine=="x86_64"


# TODO: put the ~/.hub-id path in config.json
- name: generate hub unique UUID if not existing
  shell: creates={{ home }}/.hub-id
      uuidgen > {{ home }}/.hub-id
- name: get the hub unique UUID
  command: "cat {{ home }}/.hub-id"
  register: hub_id
- debug: >
    msg="hub-id: {{ hub_id.stdout }}"

- name: create /etc/wpa_supplicant/
  file: path=/etc/wpa_supplicant/ state=directory
  sudo: yes
- name: pupulate /etc/wpa_supplicant/wpa_supplicant.conf
  script: wpa_supplicant-conf.sh {{ home }} {{ config }}/config
  sudo: yes

- name: extract remote host
  shell: "{{ app }}/config.sh | jq --raw-output .remotehost"
  register: remotehost
- name: cache the remote host key
  shell: >
      ssh-keyscan -t ecdsa,rsa,dsa {{ remotehost.stdout }} >> ~/.ssh/known_hosts

- name: extract the folders that have to be created
  shell: >
      {{ app }}/config.sh | jq --raw-output '[.logs_path+"{{ hub_id.stdout }}/"+(.logging_modules|.[]), .logs_path+"{{ hub_id.stdout }}/", .data_path+"{{ hub_id.stdout }}/", .watchdog_path]|.[]'
  register: folders
- name: mkdir
  file: path={{ item }} state=directory
  with_items: folders.stdout_lines

- name: create cron entries
  cron: name="run '{{ item }}'"
      job=". /etc/profile; . $HOME/.profile; cd '{{ app }}'; '{{ app }}/{{ item }}'"
  with_items:
    - smarthome-hub-runner.sh
    - smarthome-hub-watchdog.sh
